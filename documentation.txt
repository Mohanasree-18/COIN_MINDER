                      **BACKEND DEVLOPEMENT**

1.create <backend> folder,open terminal <npm int --yes> (initialising project)
2.open package.json and change main: to app.js
3.create app.js file in backend folder
4.install express and mongoose <npm i express mongoose>
5.create <model> folder in backend which will store all schema and structure of our database
6.create following folders in backend <controllers>,<utils>,<middleware>,<routes>

* MODEL folder for database structuring

1.files in this folder starts with uppercase
2.create these files in this folder <User.js>,<Transaction.js>,<Category.js>
3.write corresponding code into that files to structure them
4.we referenced User in other 2 files with following syntax
user: This field specifies a reference to another object in another collection (User collection in this case). It uses mongoose.Schema.Types.ObjectId to indicate that this field will store MongoDB ObjectId values. The ref property specifies the model to which this ObjectId refers (User model).

* CONTROLLERS folder -here we write our business logic and from this we interact with database

here we try to implement user authentication
<npm i express-async-handler bcryptjs jsonwebtoken> - to handle async error and to hash the password for security
1.create these no of files equal to no of files in model each correspond to one i.e each controller respond to each model<userctrl.js>

* ROUTES folder

here we create no of files in controller each will react to one corresponding controller
for every router you need to download express
we have to call all our routers in main file i.e app.js

* APP.JS - main file

1.create express server in this file
2.you need to require all the routes files
3.to check routes functionallity you need to download and check it through postman
4.postman is used to test and debug api easily
\*.run this file using <node --watch app> command it is auto updtable like nodemon
5.write code to connect to mongoose
6.write code fpr middlewares here 1st one is to parse incoming data here specially it is from postman

* postman connection

1.create new workspace blank
2.slect API demos
3.name it
4.you will get workspace and name it as user and change it to post request
5.paste your url there
6.now send request,it will show you 200 sucess code
7.if you want to send data then click on body and then raw now write the data that you want to send and click on send the you can see 200 sucess code to view your data go to terminal in vs code now you can see that data

* MONGODB connection

1.run this commands in terminal <npm i mongodb>,<npm i mongooose>
2.go to browser and to mongodbatlas
3.create new project and repeat all the prev steps ,you will get a connection string
4.go to app.js and write code to connect mongoose
5.if you want to send data to database go to postman

*<userctrl.js>

1.you have to add register functionality before all these steps
2.after all thsese steps you have to write login functionality
3.go to userrouter.js and create route to login functionality
4.after that go to postman and create another collection called USER_login and change the url from register to login and set it as post req
5.now check the login functionality by sending json data

now lets create middleware to handle errors

*MIDDLEWARES folder

1.create <errorhandlerMiddelware> file
2.after 75 line of this documentation go to this <errorhandlerMiddelware> and add functionality to display errors correctly

now write error handler midddleware require statement in the app.js
now lets perform authorisation before that go to <userctrl.js> and create profile section
now got to <userRouter.js> and add route
until we have created profile and retrived info through id but this task should be auhtorised and id should be gievn dynamically not manually in the code
now we gonna achieve authorisation nd dynamic input of id through following changes
token is generated through post login
copy that token and now give it as the value in the headers of get profile request where key is set to authorization
now send get request with the token and then you can see details of that token related user details
now we are adding two more fucntionalities to <userctrl.js> they are changepassword and updatuserprofile write their code
go to route.js and define two put routes for these two functionailties and save it
go to postman and creaate 2 more collections with put requests and different urls
for these two requests you need to send token in header i.e if you want to change or update your password or profile you need to have a login account correctly so whwenever you log in you will get a token
input this token for these two put requests in header and again click on body and then json and now enter your required password to change or req username or email to update your profile

after this we are done with <userctrl.js>
this file ultimately contains the functionality to #register,#login,#profile,#changepassword,#updatepassword
in the process developing <userctrl.js> we have created 2 middleware files <errorHandlerMiddleware.js>,<isAuth.js> and 1 route <userRouter.js>

**UNTIL NOW WE DEVELOPED 1 CONTROLLER FILE <userctrl.js> CORRESPONDING TO THE MODEL FILE <User.js> NOW LET US DEVELOP THE OTHER 2 CONTROLLER FILES CORRESPONDING TO OTHER 2 MODEL FILES**

create one file named <categoryctrl.js> in controllers folder to develop functionality related to <Category.js> in model
create all category related files <categoryRouter.js> and then attach it to the app.js
inorder to develop this category just follow instructions same as user
now lets explore and develop <transactionctrl.js>

develop transaction related files and it is the final one in the model**
same as user and category ,develop transaction also .
Now we are done with API development i.e Backend

**TO RUN BACKEND YOU NEED TO TYPE <node --watch app>**


                                 **FRONTEND DEVLOPEMENT**


1.create <frontend> folder
lets understand the terminology and tools that we use in frontend developement
we use VITE to create react application
we use RTK(redux tool kit) for global state management
we use TANSTACKQUERY for managing server state
we use TAILWINDCSS for UI
we use FORMIK to handle forms in react
YUP for form validations
AXIOS to make http requests

**<VITE>** -installation
now open terminal in frontend and type <npm create vite@latest>
then that will ask you for project name then type "." and enter then ask you to select framework and variate select react and javascript
then type <npm i> to install all packages
after all these commmands you can see folders like <public> with <vite.svg>file ,<src> with <assets>folder with <react.svg> file and other files files like <app.csss>,<app.jsx>,<index.css>,<main.jsx> in src folder and <index.html>,<vite.config.js>,<.eslintric.cjs> these three are outside the folder

**<REDUX TOOL KIT>** -installation
to install RTK run this commanad <npm install @reduxjs/toolkit>
redux can be used with any framework so if you want to use it with react use bindings and run this command for bindings <npm install react-redux>

**<TANSTACK QUERY>** -installation
react query manage server state so this is one such installation which manage server state such as caching,loading,error handling and other properties
to install this run this command <npm i @tanstack/react-query>
go to tanstack query website click on read docs and scroll down and click on "quickstart" and then click on "devtools" copy its installation command
run this command to install dev tools which work similar to redux dev tools <npm i @tanstack/react-query-devtools> and this dev tool help us to view all http req

**TAILWINDCSS**- installation
go to tailwindcss website click on getstarted,click on frameworkguides and then select vite
copy the install command i.e 2nd command in the website and run it in the terminal <npm install -D tailwindcss postcss autoprefixer>
npx tailwindcss init -p>
now copy config.css in the website and paste it in the tailwind.config.css
now go to website and copy index.css and open vscode ,src folder ,index.css file and paste it here by clear its all content
now write some code in app.jsx in src folder

**FORMIK**- Installation
go to formik website and get command to run as <npm install formik --save>

**YUP** -Installation
\*go to webiste and get command as <npm i yup>

**AXIOS** -Installation
run this command to install axios <npm i axios>

/now after installing all the installation run the final command to <npm run dev>
/after running this command you will get url to our react website then copy it and paste it in the browser to see our react application with text "Hello World!"\*
/install react icons with this command <npm install react-icons --save>

/TO RUN FRONTEND YOU NEED TO RUN <npm run dev>**
/install react-router-dom to implement navigations <npm i react-router-dom>
1.we have to configure our application to use react-router-dom so for that create <components> folder in <src> folder

* COMPONENTS FOLDER

1.first lets create <Home folder> in <componenets> folder

_<Home> folder in <src> folder_
2.from final resource code from udemy copy Home folder in Templates and paste it in the Home of components folder in vs code
3.Now you can see <HomePage.jsx> file in <Home> folder in components
4.now go to <app.jsx> in <src> folder and include these BrowserRouter,Router and Routes there and then save it and run <nom run dev> then you can see url of our react app copy that and paste it in the browser to see Homepage of our website
5.Now go to github link of udemy and copy the <Navbar folder> folder and paste it here in <components> folder

*_<Navbar> folder in src folder_
1.In <Navbar folder > folder you can see 2 files private and public you can see private navbar only after you are logged in and for default we shoe public navbar
2.for this to run you have to install 2 things <npm i @headlessui/react> ,<npm i @heroicons/react>
_Both @headlessui/react and @heroicons/react are developed by the same team behind Tailwind CSS, ensuring they work well together
_@headlessui/react: Provides unstyled, accessible UI components that you can customize to fit your design
@heroicons/react: Provides a set of high-quality SVG icons that can be used in React applications.
3.now go to <App.jsx> and add route for publicnavbar and then npm run dev then you can see register and login buttons on the navbar
4.so in navbar you have register and login to render this components you have to create them first
5.these should be created in <Users> folder in <src> folder

*<Users> folder in src folder
1.paste the users folder from templates in github to here in components folder
2.Now you can see following files in <Users> folder they are <Dashboard.jsx>,<Login.jsx>,<Register.jsx>,<UpdatePassword.jsx>,<UserProfile.jsx>
3.Now write code into <login> and <register> and save them
4.Go to <App.jsx> and write require statements to import login and register here
5.Now go to routes section and define routes to them and then save and npm run dev
6 now you can explore register and login pages
7.create one folder <redux> in src folder

*<Redux> folder in src folder
1.create <silce>, <store> folders in redux folder
2.create <store.js> file in <store> folder
/Redux slices help organize and manage your application's state into smaller, manageable pieces (slices) that components can interact with, ensuring clarity, modularity, and efficiency in state management.
/so we have many slices each corresponding to the component that we have in our application

/A Redux slice is a modular unit that encapsulates a specific portion of the application's state management. It consists of:
Initial State: Defines the initial data structure and default values for the slice.
Reducers: Pure functions that specify how the slice's state should be updated in response to dispatched actions.
Actions: Objects that describe events or payloads of data sent from the application to the Redux store to trigger state updates.**

3.lets create <authSlice.js> file in <slice> folder for userAuthentication
4.import createslice in this file which automatically imports reducers and actions
5.write completing code in this
6.open <store.js> file and write code to configure store
7.now open <main.jsx> in src and import store and provider here and write their related code
8.after this go to extensions in brewser and download redux extension
9.now save all the files and npm run dev now you can see auth:null in state of the redux extension in the browser
\*with this REDUX partis completed and for that we used react-router-dom now lets start reactquery

\*for reactquery we use tanstackquery
\*React Query: A library for managing server state, handling data fetching, caching, synchronization, and error handling.
Query Client: Central configuration for React Query.
QueryClientProvider: Provides the Query Client to the React component tree.
DevTools: Tool for visualizing and debugging queries and mutations.

1.for this go to <main.jsx> file and write all import statements required for react query
2.here we use QueryClientProvider instead of only provider we used in redux ,we also use ReactQueryDevtools
3.after this save and run
4.now we can see an icon above the footer click on it now we can see reactquerydevtool which is similar to the extension we have installed on our browser which is reduxdevtool
5.now to to src and create one folder <services> for reactquery

*<SERVICES> folder in src folder
1.this folder contains files which correspond to features of our application and each one will correspond to one slice file in <slice> folder
2.in services folder create <userServices.js>,<transaction.js> files for present,in future we will create files for all
3.create <utils> folder in <src> and in that create <url.js> file

*<UTILS> folder in src folder
1.In <url.js> file write <export const base_url=" ">
2.now go to postman project and collections where you acessed this application and get the base url of this application and that is "http://localhost:8000/api/v1" now paste it there

*<SERVICES> folder in src folder
1.after the creation of <url.js> file now open <userServices.js> file and create LOGINAPI
2.now we have to call this loginAPI in Login component
3.Now go to <login.jsx> file in <Users> folder in src folder
4.now add mutation functinality and and etc
5.Now open react app and try to login then it will show error called "XMLHttp req"
  i.e network error
6.This error is bcoz of security issues due to your local host url once you install 
*<cors> package 
7.Now go to <app.js> in backend and open terminal and <npm i cors>
8.In app.js file write its installation and configuration
9.and then npm run dev 

/*now go to <components> folder and create <Alert> folder and in that <AlertMessage.jsx> and write code in that
10.Now go to login.jsx file again write code in display messages to display green coloured login success and red coloured invalid credentials

*<users> folder in components folder
1.now go to login.jsx and import authSlice
2.now import useDispatch in this file to dispatch payload data from reactquery to store
3.now create object to usedispatch function and call it down in the code
4.now run code and open chrome redux extension there you can see payload 
5.now if you refresh the page you will see undefined user therefore to save the user in our store we need to improve code
6.now below the dispatch data code write 1 line to store payload in loacl storage
7.to avoid entering credentials everytime in the website,mention email and password in the code only 
8.now run the code and open website >inspect>console>application>localstorage here now you can see the user data and stored payload in this and redux chrome extension 
but when you refresh the page info in redux extension will go undefined byt info stored in localstorage will be still available

*<authSilce> file 
1.acc to above line you got stored your data in local storage inorder to save it in the store follow below instructions
2.open authSlice file in that go to red heading INITIAL STAET there you can see user:null here modify the code as if you have any data in localstorage  save it on redux extension and store too or else show null
3.after this modification you can see data on store or redux extension even after page reload 

*<privatenavbar> file
1.now create nav bar file this navbar will be displahyed once user is logged in 
2.write code in this file 
3.go to app.jsx and import private navabar file there and include this after publicnavbar
4.inorder to dispplay it we need to know whether the user is logged in or not for that we have to get userinfo
5.for this create one utility file i.e <getUserFromStorage> file in utils folder
6.import this file in <App.jsx> and initialise object to that and print that token 
7.Now open the react page and login and view console now you can see token printed in the console
8.Now lets implement logging out functionality bcoz of including privatenavbar file logout icon will be displayed on the react page

*<PrivateNavbar> file 
1.logging out means removing user from the localstorage
2.write some code in this file using dispatch functions
3.run app and click on logout now you can see no info on loaclstorage
4.Until now we are dependednt on localstorage data to check whether the user is logged in or not but we have to deal with redux for that

*<App.jsx> file
1.for this "useSelector" hook should be used to select pieces of data from local sto
2.Now import this hook in this file
3.successful implementation of privatenavbar by checking userlogin through redux extension or store
4.lets explore registration page 

1.go to <userServices.js> file and add API for register

*<register.js> file
1.same code as login.jsx but modify some components
2.check functionality by registarting
3.we have to direct to login page on successful registration  we can do this using 
*"useNavigate" from react-router-dom
4.we use "useEffect " for navigation from registration to login
5.if you are a new user you will register on successful registration ,you will be eredirected to login page
6.now lets redirect from login to profile page on sucessful login
7.for that we need to create profile page first in <users> folder in <components> folder in <src> folder
8.before that we are going to handele addcategory when user logged in
9.now go to src folder and then components and then create <AddCategory> file 

*<AddCategory.js> file
1.now write code in it 
2.if any problem occurs comment out alert messages
3.now go to <App.jsx> and import AddCategory file in app.jsx
4.now add route in routes where path is "/add-category"
5.now run and see react app and login and click on AddCategory
6.there you have to enter "type" and "name" and click on addcategory then in console you can see entered category and type
7now lets handle this file reactquery so go to services folder
8.create category folder in that and in that create <categoryServices.js> file
 
 *<categoryservices.js> file
 1.in this file write code to define 2 API addcategoryAPI and listcategories
 2.now go to <addCategory.jsx> file  and import that API file and modify the code
 3.now run react app you will get an axios error indicationg bad response bcox in postman whenever we add a category we will send token also 
 4.now go to <categoryServices.js> file to incldue this feature 
 5.in the secction of addCategoryAPI at down write headers and include authorisation in that write 'Bearer token' which is same as in postman
 6.copy the token from postman and paste it after Bearer and run the app
 7.now after entering name and type zand click on addcatdgory you can see sucess in console
 8.But this is not good way to paste token so we have to input it dynamically

 *<getUserFromStorage.js> file
 1.now we have to get token from localstorage inorder to pass it dynamically
 2.now lets write code to get it from local storage in this file in utils folder
 3.no code is required existing code anyways gets token\
 4. so go to categoryServices.js file and import this initiialse object for this and paste this object inplcace of token

*now lets develop functionality of listcategories
1.aim is to get list of categoroies
2.for that create <categoryList.jsx> file in Category folder in users folder in components

 *<categoryList.jsx> file
 write code into this 
 1.open app.jsx fike and import <categoryList.jsx> file
 2.add route for categorylist in app.jsx
 3.run app you can see null in categories list
 4.to display any data in that we have to get data from backend
 5.for that we use useQuery this involves a get method
 6.then you can see categorylist in console
 7.write some code i.e in <categorieslist> file in place [1,1] replace that with data
 8.now run you can see categorieslist in the react app only

 *now lets explore the functionality to update or delete category 
1.in category list you can red icon to delte and blue icon to update
2.if you click on blue icon you will be directed to a page with url ending with that userid of categories list
3.our aim is to display a component to edit for that user
4.for that create <updatecategory.jsx> file in category folder in components folder
 
*<updateCategory.jsx> file in category folder in components folder
1.write code in this file
2.now go to app.jsx and add route to updatecategory 
3.now run app then if you update any category it will be updated successfully
4.to check that click on categorieslist then you can see updated ones
*.but whenever we update a category we should be directed to categorieslist page automatically lets expolre this Now
1.for that go to  <updateCategory.jsx> file only and write code to redirect to categorieslist page after successful updation

*Now lets explore functionality of delete category
1.now go to categoryServices.js file and add API to delete category
2.run and see if you delete and refresh the page the category is gone
3. we can modify that to without refresh we can delete the category for that we have to use refetch
4.then click on add categories and add any one and then click on categories you can see it is added
5.but we have to get directed to categories list whenever you add a category 
6.for this functionality add small code in <addCategory.jsx> file
7.now run app you can see updated changes

*<TRANSACTIONS> folder in components folder in src folder
1.create trasactions named folder
2.create <TransactionForm.jsx> file 
3.go to app.jsx and import this transactionform file and in routes add route to this
4.run app you can see transaction page
5.now we want to get list of categories in the listcategories in other page as dropdown to get select for transaction
6.after submitting this you have to see "trnsaction added successfully' in green on app and those details in console if you want to check it whthe
check it postman it will get updated automatically
*now lets explore and develop dashboard inorder to display all transactions and charts

*<Dashboard.jsx> file in users in components folder
1.write code in it 
2.before that go to Transactions folder in components folder and creatte <TransactionList.jsx> file and write code init
3.write code in it
4.now go to services folder and create <Transactions> folder and <transactionServices.js> file in that folder
5.now write code for 2 API in this 
6.now import this API files in <transactionList.jsx> file
7.run app now you can see list of transactions and its details on the dashboard
8.we can filter these transactions based on income or expense startdate and end date
 but these need extra functionlity lets explore that 

*Now lets explore transaction filtering
1.write code for filtering in <transactionLIst.jsx > file
2.now run the app and apply filters you will get filtered results

*CHART.JS INSTALLATION
to visualise charts for total income and expenses we gonna use chart.js
1.here we have to install 2 for charts one for js and one for javascript
2.CHART.JS for javascript and react-chartjs-2 for react
3.<npm install chart.js> for javascript run this command in frontend to install it
4.<npm i react-chartjs-2> for recat run this command also in frontnend
5. these content should copied from reactchartjs application
*/ import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
*import { Doughnut } from "react-chartjs-2";
*ChartJS.register(ArcElement, Tooltip, Legend);//
this should be pasted in <transactionChart.js> file 

*<transactionChart.js> file
1.create this file in transactions folder in components folder in src folder
2.the kind of chart we are going to use is Doughnut
3.inorder to visualise income and expenses using chart we need to fecth them first 
4.now include tag <transactionchart> in dashboard.jsx file
5.now write code into transactionChart.js file
6.lets calculate the total income and expense in this file
7.after writing the code to this print that in the console to verify
8.run app we got income and expense seperate money
9.now we can plot chart to visualise

*visualising
1.to visulise into a chart we need to input it income and expense in the format chart accept
2.to modify our data into that format we use datastructure
3.after writing datastructure sav and run app you can see doughnut shaped chart 
4.Now viualisation part is completed,let develop remainig functionalities changepasswprd

*USER profile
1.now go to users folder and create <userprofile.jsx> file
2.write code into it
3.go to app.jsx and add route to userprofile 
4.before adding route import userprofile file into app.jsx
5.do same for change password but no need nof new route beacuse change password will be a small component in update profile so no seperate route is needed
6.go to services folder and to <userservices.js> file and write code for 2 API that are for changepassword and update profile


*PROTECTING COMPONENTS
1.if user is logged out he couldnnot see the profile transaction..etc
2.To implement this fucntionlity we use the concept of high order components 
3.high order components are those which take other components as input 
4.to implement this security feature go to components and create a new folder called <AUTH>

*<AUTH> folder
1.create <authRoute.jsx> file here 
2.write code into it

*COMPLETED THE WHOLE project

*TO RUN BACKEND:< node --watch app > command
*TO RUN FRONTEND:< npm run dev>

1.you can refer to following test data
username:chinni
email:mohanasreeummidi@gmail.com
password:sree@18
token:can be get from user post login in postman

or 
email:c@gmail.com
password:ccccc@18

before starting the react app ,first run the backend
after that run frontend to see react app
if any errros occur during login regristration or anything open postman for debugging 
